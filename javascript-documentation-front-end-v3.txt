Documentation for Chingu V10 Geckos team 1
::Nellie Tobey
Front-End JavaScript

Structure:

Two html pages are present at this time.
The index.html and the basicTerminology.html

The index html links to the basicTerminology html that holds a template for quizes.
This template takes form through the css file, 'cess_file' that is loaded from the index html link(s).
The css file is not stored in localStorage, but the file name is. This iss checked by the 'setCSS.js' file
on load of the basicTerminology(quiz page).html.
--set_css()
  In a try block, an html link element is created, and according to which quiz is selected, the css file
  file name is loaded as the stylesheet for the html. catch will record in console.log if the file is not
  successfully retrieved.
The json data is also determined by a variable set in the 'QuizSelection.js'.   The QuizSelection.js is
a short JavaScript file in the index.  It assigns the variable for which quiz css to use('cess_file'),
and a varaible that is used in the quiz pages' js file, ('quiz.js') that determines which array
from the json object to grab and use in assigning questions.
--load_one_html(), load_two_html(), load_three_html(), load_four_html():
  these will set the variables in localStorage retrieved by the quiz.js for which json object to grab
  and which css file to load for the link that has been clicked.
--window.onload function():
  sets the addEventListener to each empty link <a> so that one of the above four loads is selected on click,
  corresponding css file, and json object are loaded as variables in the localStorage in those functions.
There is one json file in use, and the object holds an array with objects inside it to set up each question.
So far, a question's data is set up in this way:
(( first question from the basic quiz.))
{
  "question_j": "What is a boolean?",
  "correct_j": "c",
  "box_type_j": "multiple",
  "hint_j": "Do or do not, there is no try. -- Master Yoda",
  "code_box_j": "some code(here)" --or "none",
  "answers_j": {
    "a": "True",
    "b": "False",
    "c": "A value of True or False, but never both.",
    "d": "Something you add to soup."
  }

  A question can have one of two box_type_j's. "multiple" for multiple choice, and "TorF" for true or false.
  Multiple choice now has the option of a code_box_j,  setQuizBoxType has been changed to check for the
  booleans that will determine if a code_box should be displayed.  The text is added via the retrieve_JSON.
  Because the JavaScript file has declared variables of similar names as the items in the object, the
  " _j " was added to keep the JavaScript from having two identifiers with the same names.

  The JavaScript functions:

  from bottom up.

  start_quiz() --
  This function calls three other functions to set up and begin the quiz process.  Because most DOM elements
  need to be loaded before changes can be assigned to them, the start button that uses this call is very important
  to keeping the page loading without error.
  ----  the called functions:
        setDOMconstants()--
            grabs all needed DOM elements with getElementById() that will be assigned and changed throughout the
            javascript.
            such as:
                the 'quiz_box'  where our quiz data from json will be rendered.
                hidden and items that will be shown at the end of quiz such as 'congrats'.
        addEventHandlersToButtons()--
            add's the necessary event listeners to buttons used in the quiz.
            such as:
               in multiple choice:  a,b,c,d
               in true or false: True and False selections
               below the quiz_box the buttons for options to 'skip', 'previous', and 'hint'.
               Hints were added 7-23-19
               the continue_btn which is active on a correct answer so that the user may move on to the next question.
        loadCurrentQuestion(current_index)--
            This function uses the current_index (a declared variable set in setDOMconstants to 0) to control which question set is retrieved from jSON
            it uses the function retrieve_JSON(i) |&| getUserQuestions(i)

  presentOption() --
  This function decides if the previous or skip button are clicked through the 'this.id'. It uses if() to check if
  moving the current_index up by one, or down by one is within the bounds of the dict array that is retrieved from jSON
  Items that should be hidden on changing the question are hidden.  No check is made to see if they already have a display: none;
  -new- built in logic operator to check if user is in the basicClone.html and using
  the user created object for question/page build.  It reroutes to the getUserQuestions(i) if location is basicClone.html,
  and if not,  uses the json_obj.json to render questions/page instead.

  set_current_answer() --
  This function uses this.id to send the currently clicked answer, (a,b,c,d or True, False) to the functions
  check_answer(current_answer)
  -new- built in logic operator to check if user is in the basicClone.html and using
  the user created object for question/page build.  It reroutes to the getUserQuestions(i) if location is basicClone.html,
  and if not,  uses the json_obj.json to render questions/page instead.

  check_answer(current_answer) --
  This function uses the current_answer argument and a series of if/else clauses to check if the answer the
  user clicked is correct, or incorrect, and whether or not the quiz is at it's end.
  It will also increment the current_index on successful answers.
  This function uses many hide_element() and show_element() functions to change the layout of the quiz upon completion.

  reset_question() --
  This function will hide the continue_btn, the results, and the hint.  It then call loadCurrentQuestion(current_index).
  No checks are made to see if the items being hidden already have a display: none;

  end_quiz() --
  Hides all elements relating to the quiz portion, and shows items of the Congratulations display.

  setQuizBoxType(multiple, code_inside) --
  This function uses the argument multiple and code_inside, which are booleans set in retrieve_JSON.
  There are three displays controlled here,  the quiz_box which is for multiple choice, and the true_false_box which is for
  true or false questions.  The third is the multiple choice, with an added display of the code_box in html.

  displayHint, hide_element, show_element, load_quiz_buttons, show_continue_btn--
  These functions change the display of elements to hide, style.display = 'none';  or show the element according to design needs.
  For example, most items are inline-block,  but the quiz_buttons are in a flex.
  The hint needs the current json dict's  hint_j assigned to innerHTML.

  show_element_results(element, message)--
  results variable is retrieved from DOM by class. A for loop addresses each result div,
  One in multiple choice, one in True or False, and displays either "try again", or "fantastic",
  depending on a logic in check_answer for if the answer was correct.


  hide_element_results(element)--
  results variable is retrieved from DOM by class. A for loop addresses each result div,
  One in multiple choice, one in True or False.  This changes both to display = none.

  loadCurrentQuestion(i) --
  Uses i,  the current_index = i, is passed in for all uses so far, this calls the retrieve_JSON(i) function which
  grabs the code block / object that holds the data to render to the html.
  -new- built in logic operator to check if user is in the basicClone.html and using
  the user created object for question/page build.  It reroutes to the getUserQuestions(i) if location is basicClone.html,
  and if not,  uses the json_obj.json to render questions/page instead.

  add_alt_to_images()-- Not in use yet.  This will add alt's to the images for the starting point of the quiz, and end point.

  setDOMconstants() --
  Assigns the necessary element's to their JavaScript variable that has been declared at the beginning of the file.
  It also hides and shows the elements that are to be rendered for the start of the quiz.
  *to-do:  move the hide/show to a separate function.

  retrieve_JSON(i) --
  This function uses 'fetch' to grab our json_obj.json.  Inside the json file our object has an array for each quiz template.
  an if/else checks the localStorage for the variable that will tell json_obj which array to assign to the dict variable.
  from the dict, we grab the question in the list by index i.  (i = current_index atm).
  if code_box_j = 'none',  the html code box will not be displayed.  Currently code box's are only available for multiple choice.
  The elements for the quiz_box/true_false_box are then assigned by what object is retrieved from the array.
  object:
    (( first question from the basic quiz.))
    {
      "question_j": "What is a boolean?",
      "correct_j": "c",
      "box_type_j": "multiple",
      "hint_j": "Do or do not, there is no try. --Master Yoda.",
      "code_box_j": "some code here(to be written to HTML)" --or 'none' for no code
      "answers_j": {
        "a": "True",
        "b": "False",
        "c": "A value of True or False, but never both.",
        "d": "Something you add to soup."
      }

  getUserQuestions(i) --
    This is just like the retrieve_JSON(i), but is used for the Make your own quiz part of the site.
    It get's it's json object from the localStorage, and parses.  This object is used in the same way the
    retrieve_JSON does,  hint, and codebox are not in use in the MYO(make your own) yet.  Backend handles the firebase
    login, and making/saving MYO to storage.
